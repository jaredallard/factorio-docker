name: docker

on:
  push:
    branches: [main]

  schedule:
    # Rebuild weekly for container updates.
    # https://crontab.guru/every-week
    - cron: "0 0 * * 0"

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: jaredallard/factorio

    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - uses: jdx/mise-action@v3
        with:
          experimental: true
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Determine date for tagging
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
      - name: Use the timestamp of the last commit as the build date
        run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV
      - name: Get Go version from mise
        id: go
        run: echo "version=$(mise current golang)" >> $GITHUB_OUTPUT
      - name: Build and push image
        uses: docker/build-push-action@v6
        id: push
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}
        with:
          context: .
          push: true
          sbom: true
          build-args: GO_VERSION=${{ steps.go.outputs.version }}
          # Latest & SHA are mutable since we rebuild weekly. We include
          # date in case there's a need to reference a specific build at
          # a specific date.
          tags: |-
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DATE }}
      - name: Attest
        uses: actions/attest-build-provenance@v3
        id: attest
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
